health.status.path = "/app/isHealthy"

haystack.graphite.host = "monitoring-influxdb-graphite.kube-system.svc"

span.accumulate {
  store {
    min.traces.per.cache = 1000 # this defines the minimum traces in each cache before eviction check is applied. This is also useful for testing the code
    all.max.entries = 20000 # this is the maximum number of spans that can live across all the stores
  }
  window.ms = 10000
  poll.ms = 2000
  packer = none
}

kafka {
  close.stream.timeout.ms = 15000

  topic.consume = "proto-spans"
  topic.produce = "span-buffer"

  num.stream.threads = 2
  poll.timeout.ms = 100

  # if consumer poll hangs, then wakeup it after after a timeout
  # also set the maximum wakeups allowed, if max threshold is reached, then task will raise the shutdown request
  max.wakeups = 100
  wakeup.timeout.ms = 3000

  commit.offset {
    retries = 3
    backoff.ms = 200
  }

  # consumer specific configurations
  consumer {
    group.id = "haystack-trace-indexer"
    bootstrap.servers = "kafkasvc:9092"
    auto.offset.reset = "latest"

    # disable auto commit as the app manages offset itself
    enable.auto.commit = "false"
  }

# producer specific configurations
  producer {
    bootstrap.servers = "kafkasvc:9092"
  }
}


backend {

  client {
    host = "localhost"
    port = 8090
  }
  # defines the max inflight writes for backend client
  max.inflight.requests = 100
}

service.metadata {
  enabled = true
  flush {
    interval.sec = 60
    operation.count = 10000
  }
  es {
    endpoint = "http://elasticsearch:9200"
    conn.timeout.ms = 10000
    read.timeout.ms = 5000
    consistency.level = "one"
    index {
      # apply the template before starting the client, if json is empty, no operation is performed
      template.json = "{\"template\": \"service-metadata\", \"index_patterns\": [\"service-metadata*\"], \"aliases\": {\"service-metadata\":{}}, \"settings\": {\"number_of_shards\": 4, \"index.mapping.ignore_malformed\": true, \"analysis\": {\"normalizer\": {\"lowercase_normalizer\": {\"type\": \"custom\", \"filter\": [\"lowercase\"]}}}}, \"mappings\": {\"metadata\": {\"_field_names\": {\"enabled\": false}, \"_all\": {\"enabled\": false}, \"properties\": {\"servicename\": {\"type\": \"keyword\", \"norms\": false}, \"operationname\": {\"type\": \"keyword\", \"norms\": false}}}}}"
      name = "service-metadata"
      type = "metadata"
    }
    # defines settings for bulk operation like max inflight bulks, number of documents and the total size in a single bulk
    bulk.max {
      docs {
        count = 100
        size.kb = 1000
      }
      inflight = 10
    }
    retries {
      max = 10
      backoff {
        initial.ms = 100
        factor = 2
      }
    }
  }
}

elasticsearch {
  endpoint = "http://elasticsearch:9200"

  # defines settings for bulk operation like max inflight bulks, number of documents and the total size in a single bulk
  bulk.max {
    docs {
      count = 100
      size.kb = 1000
    }
    inflight = 10
  }

  conn.timeout.ms = 10000
  read.timeout.ms = 5000
  consistency.level = "one"
  max.connections.per.route = 5

  retries {
    max = 10
    backoff {
      initial.ms = 100
      factor = 2
    }
  }

  index {
    # apply the template before starting the client, if json is empty, no operation is performed
    template.json = "{\"template\":\"haystack-traces*\",\"settings\":{\"number_of_shards\":16,\"index.mapping.ignore_malformed\":true,\"analysis\":{\"normalizer\":{\"lowercase_normalizer\":{\"type\":\"custom\",\"filter\":[\"lowercase\"]}}}},\"aliases\":{\"haystack-traces\":{}},\"mappings\":{\"spans\":{\"_field_names\":{\"enabled\":false},\"_all\":{\"enabled\":false},\"_source\":{\"includes\":[\"traceid\"]},\"properties\":{\"traceid\":{\"enabled\":false},\"starttime\":{\"type\":\"long\",\"doc_values\":true},\"spans\":{\"type\":\"nested\",\"properties\":{\"servicename\":{\"type\":\"keyword\",\"normalizer\":\"lowercase_normalizer\",\"doc_values\":true,\"norms\":false},\"operationname\":{\"type\":\"keyword\",\"normalizer\":\"lowercase_normalizer\",\"doc_values\":true,\"norms\":false},\"starttime\":{\"type\":\"long\",\"doc_values\":true},\"duration\":{\"type\":\"long\",\"doc_values\":true}}}},\"dynamic_templates\":[{\"strings_as_keywords_1\":{\"match_mapping_type\":\"string\",\"mapping\":{\"type\":\"keyword\",\"normalizer\":\"lowercase_normalizer\",\"doc_values\":false,\"norms\":false}}},{\"longs_disable_doc_norms\":{\"match_mapping_type\":\"long\",\"mapping\":{\"type\":\"long\",\"doc_values\":false,\"norms\":false}}}]}}}"
    name.prefix = "haystack-traces"
    hour.bucket = 6
    type = "spans"
  }

  # if enabled flag is true, es requests will be signed
  signing.request.aws {
    enabled = false
    region = "us-west-2"
    service.name = "es"
    # if 'access.key' is not provided, will use DefaultAWSCredentialsProviderChain to resolve creds
    access.key = ""
    secret.key = ""
  }
}

reload {
  tables {
    index.fields.config = "whitelist-index-fields"
  }
  config {
    endpoint = "http://elasticsearch:9200"
    database.name = "reload-configs"
  }
  startup.load = true
  interval.ms = 60000 # -1 will imply 'no reload'

  # if enabled flag is true, es requests will be signed
  signing.request.aws {
    enabled = false
    region = "us-west-2"
    service.name = "es"
    # if 'access.key' is not provided, will use DefaultAWSCredentialsProviderChain to resolve creds
    access.key = ""
    secret.key = ""
  }
}
