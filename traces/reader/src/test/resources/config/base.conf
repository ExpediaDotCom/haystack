health.status.path = "isHealthy"

service {
  port = 8088
  ssl {
    enabled = false
    cert.path = "/ssl/cert"
    private.key.path = "/ssl/private-key"
  }
  max.message.size = 52428800 # 50MB in bytes
}

backend {
  client {
    host = "localhost"
    port = 8090
  }
}

elasticsearch {
  client {
    endpoint = "http://elasticsearch:9200"
    conn.timeout.ms = 10000
    read.timeout.ms = 5000
  }
  index {
    spans {
      name.prefix = "haystack-traces"
      type = "spans"
      hour.bucket = 6
      hour.ttl = 72 // 3 * 24 hours
      use.root.doc.starttime = true
    }
    service.metadata {
      enabled = false
      name = "service_metadata"
      type = "metadata"
    }
  }

  # if enabled flag is true, es requests will be signed
  signing.request.aws {
    enabled = false
    region = "us-west-2"
    service.name = "es"
    # if 'access.key' is not provided, will use DefaultAWSCredentialsProviderChain to resolve creds
    access.key = ""
    secret.key = ""
  }
}

trace {
  validators {
    sequence = [
      "com.expedia.www.haystack.trace.reader.readers.validators.TraceIdValidator"
      "com.expedia.www.haystack.trace.reader.readers.validators.ParentIdValidator"
      "com.expedia.www.haystack.trace.reader.readers.validators.RootValidator"
    ]
  }

  transformers {
    pre {
      sequence = [
        "com.expedia.www.haystack.trace.reader.readers.transformers.DeDuplicateSpanTransformer"
        "com.expedia.www.haystack.trace.reader.readers.transformers.ClientServerEventLogTransformer"
        "com.expedia.www.haystack.trace.reader.readers.transformers.InfrastructureTagTransformer"
      ]
    }
    post {
      sequence = [
        "com.expedia.www.haystack.trace.reader.readers.transformers.PartialSpanTransformer"
        "com.expedia.www.haystack.trace.reader.readers.transformers.ClockSkewTransformer"
        "com.expedia.www.haystack.trace.reader.readers.transformers.SortSpanTransformer"
      ]
    }
  }
}

reload {
  tables {
    index.fields.config = "whitelist-index-fields"
  }
  config {
    endpoint = "http://elasticsearch:9200"
    database.name = "reload-configs"
  }
  startup.load = true
  interval.ms = 5000 # -1 will imply 'no reload'

  # if enabled flag is true, es requests will be signed
  signing.request.aws {
    enabled = false
    region = "us-west-2"
    service.name = "es"
    # if 'access.key' is not provided, will use DefaultAWSCredentialsProviderChain to resolve creds
    access.key = ""
    secret.key = ""
  }
}
