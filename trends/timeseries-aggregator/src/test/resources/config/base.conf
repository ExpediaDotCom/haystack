health.status.path = "/app/isHealthy"

kafka {
  close.timeout.ms = 30000

  streams {
    application.id = "haystack-timeseries-aggregator-dev"
    bootstrap.servers = "192.168.99.100:9092"
    num.stream.threads = 1
    commit.interval.ms = 3000
    auto.offset.reset = latest
    timestamp.extractor = "com.expedia.www.haystack.commons.kstreams.MetricDataTimestampExtractor"
  }


  // For producing data to external and internal (both) kafka: set enable.external.kafka.produce to true and uncomment the props.
  // For producing to same (internal) kafka: set enable.external.kafka.produce to false and comment the props.
  producer {
    topics : [
      {
        topic: "metrics"
        serdeClassName : "com.expedia.www.haystack.commons.kstreams.serde.metricdata.MetricDataSerde"
        enabled: true
      },
      {
        topic: "mdm"
        serdeClassName : "com.expedia.www.haystack.commons.kstreams.serde.metricdata.MetricTankSerde"
        enabled: true
      }
    ]
    enable.external.kafka.produce = true
    external.kafka.topic = "mdm"
    props {
      bootstrap.servers = "kafkasvc:9092"
    }
  }

  consumer {
    topic = "metric-data-points"
  }
}

state.store {
  cleanup.policy = "compact,delete"
  retention.ms = 14400000 // 4Hrs
}

statestore {
  enable.logging = true
  logging.delay.seconds = 60
}

metricpoint.encoder.type = "periodreplacement"

histogram {
  max.value = 1800000 // 30 mins
  precision = 2
  value.unit = "millis"   // can be micros / millis / seconds
}

// additional tags to be passed as part of metric data
// It can be of format typesafe hocon config such as
// additionalTags  = {key: "value", key2:"value2"}
// or json such as
// additionalTags  = """{"key": "value", "key2":"value2"}"""
additionalTags  = """{"key1": "value1", "key2":"value2"}"""
