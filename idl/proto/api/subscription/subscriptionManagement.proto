/*
 *
 *  Copyright 2018 Expedia, Inc.
 *
 *     Licensed under the Apache License, Version 2.0 (the "License");
 *     you may not use this file except in compliance with the License.
 *     You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 *
 */

syntax = "proto3";

option java_package = "com.expedia.open.tracing.api.subscription";
option java_multiple_files = true;
option go_package = "haystack";

message Empty {

}

enum DispatchType {
    EMAIL = 0;
    SLACK = 1;
}

message Field {
    string name     = 1;          // name of the field
    string value    = 2;          // value of the field
}

message Operand {
    oneof operand {
        Field field                 = 1; // leaf field value
        ExpressionTree expression   = 2; // a nested expression tree
    }
}

message ExpressionTree {
    enum Operator {
        AND = 0;
        OR = 1;
    }

    Operator operator            = 1; // operator to use the subtree results
    repeated Operand operands    = 2; // list of operands
}

message Dispatcher {
    DispatchType type       = 1;
    string endpoint         = 2;
}

message SubscriptionRequest {
    ExpressionTree expressionTree       = 1;
    repeated Dispatcher dispatchers     = 2;
}

message User {
    string username = 1;
}

message CreateSubscriptionRequest {
    User user                               = 1;
    SubscriptionRequest subscriptionRequest = 2;
}

message CreateSubscriptionResponse {
    string subscriptionId       = 1;
}

message SubscriptionResponse {
    string subscriptionId           = 1;
    User user                       = 2;
    repeated Dispatcher dispatchers = 3;
    ExpressionTree expressionTree   = 4;
    int64 lastModifiedTime          = 5;
    int64 createdTime               = 6;
}

message SearchSubscriptionResponse {
    repeated SubscriptionResponse subscriptionResponse = 1;
}

message UpdateSubscriptionRequest {
    string subscriptionId = 1;
    SubscriptionRequest subscriptionRequest = 2;
}

message DeleteSubscriptionRequest {
    string subscriptionId = 1;
}

message SearchSubscriptionRequest {
    User user                   = 1;
    map<string, string> labels  = 2;
}

message GetSubscriptionRequest {
    string subscriptionId = 1;
}


service SubscriptionManagement {
    rpc createSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse);  // create a new subscription. Returns a subscription Id
    rpc updateSubscription(UpdateSubscriptionRequest) returns (Empty);   // update a subscription. All updates would be idempotent.
    rpc deleteSubscription(DeleteSubscriptionRequest) returns (Empty);   // delete a subscription.
    rpc getSubscription(GetSubscriptionRequest) returns (SubscriptionResponse);          // Fetch a subscription given the id of the subscription.
    rpc searchSubscription(SearchSubscriptionRequest) returns (SearchSubscriptionResponse); // search subscription given a set of labels.
}